
{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Docker Powered Performance Cloud",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "m1.large",
      "AllowedValues" : ["m1.small","m1.medium","m1.large","m1.xlarge","m3.medium","m3.large","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","c3.large","c3.xlarge","c3.2xlarge","c3.4xlarge","c3.8xlarge","cc2.8xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","cr1.8xlarge","hi1.4xlarge","hs1.8xlarge","i2.xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge","cg1.4xlarge","g2.2xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "Default" : ""
    },
    "ProxyServer" : {
      "Description" : "Name of the HTTP Proxy Server to use for egress traffic",
      "Type" : "String",
      "Default" : "qy1prdproxy01.pprod.ie.intuit.net:80"
    },
    "NonProxyHosts" : {
      "Description" : "Comma separated list of hosts Jmeter should connect with directly (exclude list for proxy).",
      "Type" : "String",
      "Default" : "none"
    },
    "DockerImage" : {
      "Description" : "Docker Registry Image to use (format: '<image_name>:<tag>')",
      "Type" : "String",
      "Default" : "sbg-docker-registry:1.0.0"
    },
    "S3PerfBucket" : {
      "Description" : "Bucket for performance tests and results",
      "Type" : "String",
      "Default" : "qbo-performance"
    },
    "S3Bucket" : {
      "Description" : "Bucket to use for Docker images",
      "Type" : "String",
      "Default" : "df-docker-registry"
    },
    "JMXFile" : {
      "Description" : "JMeter Test File to Execute",
      "Type" : "String",
      "Default" : "example"
    },
     "JMeterOptions" : {
      "Description" : "Jmeter test paramaters and other",
      "Type" : "String",
      "Default" : ""
    },
     "JMeterPoolSize" : {
      "Description" : "Number of the Jmeter Docker Containers to Start",
      "Type" : "String",
      "Default" : "10"
    },
    "Subnets" : {
      "Description" : "List of VPC subnet IDs for the cluster. Note: must match the passed AvailabilityZones.",
      "Type" : "CommaDelimitedList",
      "Default" : ""
    },
    "VpcId" : {
      "Description" : "VPC associated with the provided subnets",
      "Type" : "String",
      "Default" : ""
    },
    "AdminSecurityGroup" : {
      "Description" : "Existing security group that should be granted administrative access (e.g., 'sg-123456')",
      "Type" : "String",
      "Default" : ""
    },
    "AvailabilityZones": {
      "Description" : "(Optional) If passed, only launch Docker Registry nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Note: these must match the passed Subnets.",
      "Type" : "CommaDelimitedList",
      "Default" : ""
    },
    "HealthCheckGracePeriod": {
      "Description": "The length of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its health.",
      "Type": "String",
      "Default": "300"
    },
    "EC2PoolSize": {
      "Description": "Number of EC2 Servers to Start.",
      "Type": "String",
      "Default": "1"
    },
    "OfferingName" : {
      "Description" : "Offering Name used in dashboards and log indexing",
      "Type" : "String",
      "Default" : "sbg"
    },
    "ComponentName" : {
      "Description" : "Component Name used in dashboards and log indexing",
      "Type" : "String",
      "Default" : "components"
    },
    "BuildUUID": {
      "Description": "Unique identifier of the Jenkins build running the performance test",
      "Type": "String",
      "Default": "99"
    }
  },

  "Conditions" : {
    "UseAllAvailabilityZones" : {"Fn::Equals" : [{ "Fn::Join" : ["", {"Ref" : "AvailabilityZones"} ]}, ""]}
  },

  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : {
        "AMI" : "ami-2c9ed744"
      },
      "us-west-1" : {
        "AMI" : "ami-d6e3f893"
      },
      "us-west-2" : {
        "AMI" : "ami-ab36139b"
      }
    }
  },

  "Resources" : {

    "IAMUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Policies" : [{
          "PolicyName" : "S3Access",
          "PolicyDocument" : {
            "Statement": [{
              "Action"   : "s3:*",
              "Effect"   : "Allow",
              "Resource" : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "S3Bucket"} ]]}
            },
            {
              "Action": "s3:*",
              "Effect": "Allow",
              "Resource" : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "S3Bucket"} , "/*"]]}
            }]
          }
        },
        {
          "PolicyName" : "IAMAccess",
          "PolicyDocument" : {
            "Statement" : [{
              "Effect"    : "Allow",
              "NotAction" : "iam:*",
              "Resource"  : "*"
            }]
          }
        }]
      }
    },

    "HostKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref" : "IAMUser" }
      }
    },

    "ServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "HealthCheckGracePeriod": { "Ref": "HealthCheckGracePeriod" },
        "HealthCheckType": "EC2",
        "AvailabilityZones" : {
          "Fn::If" : [
            "UseAllAvailabilityZones",
            { "Fn::GetAZs": "" },
            {"Ref" : "AvailabilityZones"}
          ]
        },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" :  { "Ref" : "EC2PoolSize"} ,
        "DesiredCapacity" : { "Ref" : "EC2PoolSize"} , 
        "VPCZoneIdentifier" : { "Ref" : "Subnets" }
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config": {
            "files" : {
              "/var/docker-registry/config.yml" : {
                "content" : { "Fn::Join" : ["\n", [
                  "prod:",
                  "    loglevel: warn",
                  "    storage: s3",
                  "    s3_access_key: {{access_key}}",
                  "    s3_secret_key: {{secret_key}}",
                  "    s3_bucket: {{s3_bucket}}",
                  "    boto_bucket: {{s3_bucket}}",
                  "    storage_path: /var/docker-registry",
                  "    secret_key: {{magic_string}}",
                  "    standalone: true",
                  "    disable_token_auth: true",
                  "    search_backend: sqlalchemy",
                  "    sqlalchemy_index_database: sqlite:////var/tmp/docker-registry.db",
                  ""
                ]]},
                "context" : {
                  "access_key"  : { "Ref" : "HostKeys" },
                  "secret_key"  : { "Fn::GetAtt" : ["HostKeys", "SecretAccessKey"]},
                  "s3_bucket"   : { "Ref" : "S3Bucket"},
                  "magic_string": "fL3YHeP1cmCHH5FWm1PKaO7cdo0VXkabAgiSEestXYZDgAiQcDCsTiWpOaukB1e9"
                },
                "mode"    : "000700",
                "owner"   : "root",
                "group"   : "root"
              }, 
              "/root/.aws/config" : {
                "content" : { "Fn::Join" : ["\n", [
                  "[default]",
                  "aws_access_key_id = {{access_key}}",
                  "aws_secret_access_key = {{secret_key}}",
                  ""
                ]]},
                "context" : {
                  "access_key"  : { "Ref" : "HostKeys" },
                  "secret_key"  : { "Fn::GetAtt" : ["HostKeys", "SecretAccessKey"]},
                  "aws_region"   : { "Ref" : "AvailabilityZones"}
                },
                "mode"    : "000700",
                "owner"   : "root",
                "group"   : "root"
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
        "SecurityGroups" : [ { "Ref" : "AdminSecurityGroup" } ],
        "AssociatePublicIpAddress": "true",
        "InstanceType" : { "Ref" : "InstanceType" },

        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -ex\n",

          "export http_proxy=\"http://", { "Ref": "ProxyServer" }, "\"\n",
          "export https_proxy=\"http://", { "Ref": "ProxyServer" }, "\"\n",
          "export PROXY_SERVER=", { "Ref": "ProxyServer" }, "\n",
 	  "export NEWRELIC_SERVER_NAME=", { "Ref" : "OfferingName"}, "-", { "Ref" : "ComponentName"}, "\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r LaunchConfig ",
          "    --access-key ",  { "Ref" : "HostKeys" },
          "    --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] },
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "aws s3 cp s3://", { "Ref" : "S3PerfBucket"}, "/bootstrap/system-up /var/tmp/\n",
          "sh /var/tmp/system-up\n",
          "aws s3 cp s3://", { "Ref" : "S3Bucket"}, "/bootstrap/registry-up /var/tmp/\n",
          "sh /var/tmp/registry-up\n",
          "aws s3 cp s3://", { "Ref" : "S3PerfBucket"}, "/bootstrap/jmeter-up /var/tmp/\n",
          "sh /var/tmp/jmeter-up -n ", { "Ref" : "JMeterPoolSize"}, " -s ", { "Ref" : "JMXFile"}, " -P ", { "Ref" : "ProxyServer"},  " -N ", { "Ref" : "NonProxyHosts"}, " -u ", { "Ref" : "BuildUUID"}, " -b ", { "Ref" : "S3PerfBucket"}, " -o ", { "Ref" : "OfferingName"}, " -c ", { "Ref" : "ComponentName"}, " -j ", { "Ref" : "JMeterOptions"}, "\n"

        ]]}}
      }
    },


    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    }

  }
}
